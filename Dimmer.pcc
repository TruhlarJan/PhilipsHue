// Philips HUE Steuerung

#define BUFF_SIZE 40000
#define RD_BLOCK_SIZE 128

int DIMMER_MIN = 15;  
int DIMMER_MAX = 100;

// Übergangszeit von einem Dimmwert zum nächsten (10 = 1 Sekunde)
int TRANSITION_TIME = 10;

// http://www.developers.meethue.com/documentation/getting-started 
char* IP_ADDRESS = "192.168.1.211";
char* PORT = "80";
char* USERNAME = "j9PQCECQlbPMiYwhYJnanmFlhJzRAx1M5jReVWJV";

char streamname[100];
sprintf(streamname, "/dev/tcp/%s/%s/", IP_ADDRESS, PORT);

int nEvents;

void setBrightness(int lightID, float bri) {
    char command[200];
    char cmdscene[100];
    char selector[20];
    // Normieren von 35-100 -> 1-255
    if (bri > 0) {
        bri = (bri - DIMMER_MIN ) / ( DIMMER_MAX - DIMMER_MIN ) * 254 + 1;
    }

    sprintf(selector, "lights/%d/state", lightID);

    if (bri == 0) {
        sprintf(command, "{\"on\": false}");
    } else {
        sprintf(command, "{\"on\": true, \"bri\": %d, \"transitiontime\": %d%s}", (int) (bri), TRANSITION_TIME, cmdscene);
    }
    
    sendCommand(selector, command);
}

void sendCommand(char* selector, char* command) {

    char szTmpBuffer[RD_BLOCK_SIZE];
    int nCnt;
    int nBytesReceived = 0;
    int blData = 0;

    STREAM* TcpStream = stream_create(streamname, 0, 0);
    if (TcpStream == NULL) {
        printf("Creating Stream failed");
        stream_close(TcpStream);
        return;
    }

    char buffer[1024];
    sprintf(buffer, "PUT /api/%s/%s HTTP/1.1\r\nHost: %s\r\nConnection: keep-alive\r\nContent-Length: %d\r\n\r\n%s", 
            USERNAME, selector, IP_ADDRESS, strlen(command), command);
    stream_write(TcpStream, buffer, sizeof(buffer));
    stream_flush(TcpStream);
    // read stream
    do {
        nCnt = stream_read(TcpStream, szTmpBuffer, RD_BLOCK_SIZE, 4000);
        if (nCnt + nBytesReceived > BUFF_SIZE) {
            nBytesReceived = -1;
            break; //File is too large
        } else if(nCnt > 0) {
            nBytesReceived += nCnt;
        }
    }
    while (nCnt > 0);
    stream_close(TcpStream);
} 

// main
while (TRUE) {
    nEvents = getinputevent();
    int i;
    for (i = 0; i < 12; i++) {
        if (nEvents & 0x8 << i) {
            setBrightness(i + 1, getinput(i));
        }
    }
    sleep(100);
}
